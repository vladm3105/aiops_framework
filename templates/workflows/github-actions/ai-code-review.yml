# AI Code Quality Review Workflow Template
# AI Agent Development Framework v3.7
# 
# Configuration Variables:
# - GCP_PROJECT_ID: Your GCP project ID
# - GCP_REGION: Your preferred GCP region
# - WIF_PROVIDER: Workload Identity Federation provider
# - WIF_SERVICE_ACCOUNT: Service account for GCP authentication
#
# Setup Instructions:
# 1. Configure GitHub repository variables for GCP_PROJECT_ID and GCP_REGION
# 2. Set up Workload Identity Federation secrets (WIF_PROVIDER, WIF_SERVICE_ACCOUNT)
# 3. Ensure AI agent scripts exist in scripts/ai-agents/ directory
# 4. Customize language list in security scanning based on your project

name: AI Code Quality Review

on:
  pull_request:
    branches: [ {{ MAIN_BRANCH | default: main }}, {{ DEVELOP_BRANCH | default: develop }} ]
  push:
    branches: [ {{ MAIN_BRANCH | default: main }} ]

env:
  GCP_PROJECT_ID: ${{ "{{" }} vars.GCP_PROJECT_ID {{ "}}" }}
  GCP_REGION: ${{ "{{" }} vars.GCP_REGION {{ "}}" }}

jobs:
  ai-code-analysis:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      pull-requests: write
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Authenticate to GCP
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ "{{" }} secrets.WIF_PROVIDER {{ "}}" }}
        service_account: ${{ "{{" }} secrets.WIF_SERVICE_ACCOUNT {{ "}}" }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '{{ PYTHON_VERSION | default: 3.11 }}'

    - name: Install AI Agent Dependencies
      run: |
        pip install -r scripts/ai-agents/requirements.txt

    - name: AI Code Quality Analysis
      run: |
        # Use GitHub Copilot CLI for code analysis
        gh copilot suggest "analyze code quality for files: $(git diff --name-only HEAD~1)"
        
        # Custom AI analysis script
        python scripts/ai-agents/code-quality-agent.py \
          --changed-files "$(git diff --name-only HEAD~1)" \
          --output-format github-annotations \
          --project-context "{{ PROJECT_NAME | default: aiops-project }}"

    - name: Security Scanning
      uses: github/codeql-action/analyze@v3
      with:
        languages: {{ LANGUAGES | default: "python, javascript, go" }}

    - name: GCP Security Scanner
      if: env.GCP_PROJECT_ID != ''
      run: |
        # Scan for GCP security best practices
        gcloud alpha code security-scan \
          --source . \
          --format json > security-scan-results.json

    - name: AI Security Analysis
      run: |
        python scripts/ai-agents/security-agent.py \
          --scan-results security-scan-results.json \
          --threshold {{ SECURITY_THRESHOLD | default: high }} \
          --framework-compliance v3.7

    - name: Comment PR with AI Insights
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Check if AI analysis results exist
          if (!fs.existsSync('ai-analysis-results.json')) {
            console.log('AI analysis results not found, skipping PR comment');
            return;
          }
          
          const aiInsights = fs.readFileSync('ai-analysis-results.json', 'utf8');
          const insights = JSON.parse(aiInsights);
          
          const comment = `## ðŸ¤– AI Code Quality Analysis - Framework v3.7
          
          **Quality Score:** ${insights.quality_score}/100
          **Security Rating:** ${insights.security_rating}
          **Framework Compliance:** ${insights.framework_compliance}
          
          ### Key Findings:
          ${insights.findings.map(f => `- ${f}`).join('\n')}
          
          ### AI Recommendations:
          ${insights.recommendations.map(r => `- ${r}`).join('\n')}
          
          ### Framework v3.7 Compliance:
          ${insights.compliance_status.map(c => `- ${c.rule}: ${c.status}`).join('\n')}
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Upload AI Analysis Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ai-analysis-results
        path: |
          ai-analysis-results.json
          security-scan-results.json
        retention-days: 30